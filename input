
class quicksort{
private:	
	int* array;
	int len;
public:
	quicksort(int* arr, int l){
		array = arr;
		len = l;
	}
	void swap(int& a, int& b){
		int tmp = a;
		a = b;
		b = tmp;
	}

	//partition array according to array[i]
	int partition(int left, int right, int pivotIndex){
		int pivotValue = array[pivotIndex];
		swap(array[pivotIndex], array[right]);
		int storeIndex = left;
		for (int i = left;i < right; i++){
			if (array[i] < pivotValue){
				swap(array[storeIndex], array[i]);
				storeIndex ++;
			}
		}
		swap(array[right], array[storeIndex]);
		return storeIndex;
	};
	
	void sort(){
		sort(0, len-1);
	};
	
	void sort(int left, int right){
		if(right > left){
			int pivotNewIndex = partition(left, right, left);
			sort(left, pivotNewIndex-1);
			sort(pivotNewIndex+1, right);
		}
	};
	
	int ordered(){
		for(int i=1;i<len;i++){
			if(array[i-1]>array[i]){
				return 0;
			}
		}
		return -1;
	};
};

int main(){
	int arr[] = {5, 4, 2, 7, 0, 6, 1, 3, 8, 9};
	quicksort s(arr, 10);
	if(s.ordered()){
		return 1;
	}
	s.sort();
	if(!s.ordered()){
		return 1;
	}
	return 0;
}
